package com.generalfunction.demo.repository.login;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.generalfunction.demo.entity.User;

import lombok.RequiredArgsConstructor;

/**
 * UserRepositoryクラスはユーザー情報をDBから取得・登録する役割を担う。
 * Springの@RepositoryでBean登録され、JdbcTemplateを使ってSQL実行を行う。
 */
@Repository
@RequiredArgsConstructor
public class UserRepository implements UserRepositoryInter {

    // Spring Bootが自動生成するJdbcTemplateをDIで受け取る
    private final JdbcTemplate jdbcTemplate;

    /**
     * DBのResultSetからUserオブジェクトへマッピングするためのRowMapper実装
     * RowMapper<T>は、Spring Frameworkのorg.springframework.jdbc.coreパッケージにあるインターフェースで、JDBCのResultSet
     * （SQLの実行結果の行）をJavaオブジェクト（エンティティなど）に変換するための仕組み
     */
    private static final RowMapper<User> USER_ROW_MAPPER = new RowMapper<User>() {
        @Override
        public User mapRow(ResultSet rs, int rowNum) throws SQLException {
            User user = new User();
            user.setId(rs.getLong("id")); // idカラムの値をセット
            user.setUsername(rs.getString("username")); // usernameカラムの値をセット
            user.setPassword(rs.getString("password")); // passwordカラムの値をセット
            user.setEnabled(rs.getBoolean("enabled")); // enabledカラムの値をセット
            user.setCreatedAt(rs.getTimestamp("created_at").toLocalDateTime()); // created_atをLocalDateTimeに変換
            user.setUpdatedAt(rs.getTimestamp("updated_at").toLocalDateTime()); // updated_atをLocalDateTimeに変換
            return user;
        }
    };

    /**
     * 指定したユーザー名でユーザーを検索する。
     * 見つからなければnullを返す。
     *
     * @param username 検索するユーザー名
     * @return Userオブジェクトまたはnull
     */
    @Override
    public User findByUsername(String username) {
        String sql = "SELECT * FROM users WHERE username = ?";
        List<User> users = jdbcTemplate.query(sql, USER_ROW_MAPPER, username);
        return users.isEmpty() ? null : users.get(0);
    }

    /**
     * 新しいユーザーをDBに登録する。
     * created_at、updated_atは現在時刻で自動設定される。
     *
     * @param user 登録するUserオブジェクト
     * @return 登録に成功したレコード数（通常1）
     */
    @Override
    public int insertUser(User user) {
        String sql = "INSERT INTO users (username, password, enabled, created_at, updated_at) VALUES (?, ?, ?, NOW(), NOW())";
        return jdbcTemplate.update(sql, user.getUsername(), user.getPassword(), user.getEnabled());
    }
}