package com.generalfunction.demo.service.login;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.generalfunction.demo.entity.Employee;
import com.generalfunction.demo.repository.login.EmployeeRepository;

import lombok.RequiredArgsConstructor;
/**
 * ログイン機能関連
 * Spring SecurityのUserDetailsServiceの実装クラス。
 * 
 * ユーザー名をもとにDBからユーザー情報を取得し、
 * 認証に必要なUserDetailsオブジェクトを生成して返す。
 */
@Service
@RequiredArgsConstructor
public class CustomUserDetailsService implements UserDetailsService {

    private final EmployeeRepository userRepository;

    /**
     * 指定されたユーザー名に対応するユーザー情報をDBから取得し、
     * 認証に必要なUserDetailsを返す。
     * 
     * @param username ユーザー名（ログインID）
     * @return 認証情報を格納したUserDetailsオブジェクト
     * @throws UsernameNotFoundException 指定ユーザー名がDBに存在しない場合にスロー
     */
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // DBからユーザーを検索
        Employee employee = userRepository.findByUsername(username);
        
        // ユーザーが存在しなければ例外をスローし認証失敗とする
        if (employee == null) {
            throw new UsernameNotFoundException("ユーザーが見つかりません");
        }
        
        // Spring SecurityのUserオブジェクトをビルダーで生成し返す
        // パスワードはDBに保存されているBCryptでハッシュ化済みの値を利用
        // ここではロールを"USER"に固定しているが、必要に応じてDBから取得して設定可能
        return org.springframework.security.core.userdetails.User.builder()
                .username(employee.getUsername())
                .password(employee.getPassword())
                .roles(employee.getRole())
                .build();
    }
}