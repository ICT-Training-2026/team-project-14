package com.generalfunction.demo.repository.login;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.generalfunction.demo.entity.Employee;

import lombok.RequiredArgsConstructor;

/**
 * UserRepositoryクラスはユーザー情報をDBから取得・登録する役割を担う。
 * Springの@RepositoryでBean登録され、JdbcTemplateを使ってSQL実行を行う。
 */
@Repository
@RequiredArgsConstructor
public class UserRepository {

    // Spring Bootが自動生成するJdbcTemplateをDIで受け取る
    private final JdbcTemplate jdbcTemplate;

    /**
     * DBのResultSetからUserオブジェクトへマッピングするためのRowMapper実装
     * RowMapper<T>は、Spring Frameworkのorg.springframework.jdbc.coreパッケージにあるインターフェースで、JDBCのResultSet
     * （SQLの実行結果の行）をJavaオブジェクト（エンティティなど）に変換するための仕組み
     */
    private static final RowMapper<Employee> USER_ROW_MAPPER = new RowMapper<Employee>() {
        @Override
        public Employee mapRow(ResultSet rs, int rowNum) throws SQLException {
            Employee employee = new Employee();
            employee.setUserId(rs.getLong("user_id"));
            employee.setUserName(rs.getString("user_name"));
            employee.setPassword(rs.getString("password"));
            employee.setRoleId(rs.getInt("role_id"));
            employee.setDepartmentId(rs.getInt("department_id"));
            employee.setIsActive(rs.getBoolean("is_active"));
            employee.setCreatedAt(rs.getTimestamp("created_at").toLocalDateTime());
            employee.setUpdatedAt(rs.getTimestamp("updated_at").toLocalDateTime());
            return employee;
        }
    };

    /**
     * 指定したユーザー名でユーザーを検索する。
     * 見つからなければnullを返す。
     *
     * @param username 検索するユーザー名
     * @return Userオブジェクトまたはnull
     */

    public Employee findByUsername(String username) {
        String sql = "SELECT * FROM users WHERE username = ?";
        List<Employee> employees = jdbcTemplate.query(sql, USER_ROW_MAPPER, username);
        return employees.isEmpty() ? null : employees.get(0);
    }

    /**
     * 新しいユーザーをDBに登録する。
     * created_at、updated_atは現在時刻で自動設定される。
     *
     * @param employee 登録するUserオブジェクト
     * @return 登録に成功したレコード数（通常1）
     */

    public int insertUser(Employee employee) {
        String sql = "INSERT INTO users (username, password, role, email, created_at, updated_at) VALUES (?, ?, ?, ?, NOW(), NOW())";
        return jdbcTemplate.update(sql,
            employee.getUsername(),
            employee.getPassword(),
            employee.getRole(),
            employee.getEmail()
        );
    }
    /**
     * すべてのユーザーを取得する。
     *
     * @return ユーザーのリスト
     */
    public List<Employee> findAll() {
        String sql = "SELECT * FROM users ORDER BY id";
        return jdbcTemplate.query(sql, USER_ROW_MAPPER);
    }

    /**
     * 指定したIDのユーザーを取得する。
     * 見つからなければnullを返す。
     *
     * @param id ユーザーID
     * @return Userオブジェクトまたはnull
     */
    public Optional<Employee> findById(Long id) {
        String sql = "SELECT * FROM users WHERE id = ?";
        List<Employee> employees = jdbcTemplate.query(sql, USER_ROW_MAPPER, id);
        return employees.isEmpty() ? Optional.empty() : Optional.of(employees.get(0));
    }

    /**
     * 指定したIDのユーザーを削除する。
     *
     * @param id ユーザーID
     * @return 削除したレコード数（通常1）
     */
    public int deleteById(Long id) {
        String sql = "DELETE FROM users WHERE id = ?";
        return jdbcTemplate.update(sql, id);
    }

    /**
     * 指定したIDのユーザーにadmin権限を付与する。
     * roleカラムを'ADMIN'に更新し、updated_atを現在時刻に設定する。
     *
     * @param id ユーザーID
     * @return 更新したレコード数（通常1）
     */
    public int grantAdminRole(Long id) {
        String sql = "UPDATE users SET role = 'ADMIN', updated_at = NOW() WHERE id = ?";
        return jdbcTemplate.update(sql, id);
    }
    
    
    public int save(Employee employee) {
        if (employee.getId() == null) {
            // 新規登録
            return insertUser(employee);
        } else {
            // 更新処理
            String sql = "UPDATE users SET username = ?, password = ?, role = ?, email = ?, updated_at = NOW() WHERE id = ?";
            return jdbcTemplate.update(sql,
                employee.getUsername(),
                employee.getPassword(),
                employee.getRole(),
                employee.getEmail(),
                employee.getId()
            );
        }
    }
    
    
    
    
    
}