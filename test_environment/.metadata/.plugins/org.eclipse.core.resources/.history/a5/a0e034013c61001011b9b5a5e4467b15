package com.generalfunction.demo.entity;

import java.time.LocalDateTime;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


/*MVCにおけるmodel,人によってはエンティティという場合もある考え方の違い？
 * この段階ではMySQLとつながってないはず…
 Lombokのアノテーションについて：
 * @Data
 *   - クラスの全フィールドに対して、getter/setter、equals、hashCode、toStringメソッドを自動生成する。
 * 
 * @AllArgsConstructor
 *   - 全フィールドを引数にとるコンストラクタを自動生成する。
 * 
 * @NoArgsConstructor
 *   - 引数なしのデフォルトコンストラクタを自動生成する。
 * 
 * これらにより、コードが簡潔になり、オブジェクトの生成やプロパティアクセスが容易になる。
 * */


@Data
@AllArgsConstructor
@NoArgsConstructor
public class User {
	 private Long userId; // ユーザーID（主キー）

	    @NotNull(message = "ユーザー名は必須です")
	    @Size(min = 1, max = 30, message = "1文字から30文字で指定してください。")
	    @Pattern(regexp = "^[a-zA-Z0-9]+$", message = "ユーザー名は半角英数字のみで入力してください")
	    private String userName; // ユーザー名

	    @NotNull(message = "パスワードは必須です")
	    @Size(min = 8, max = 255, message = "パスワードは8文字以上255文字以内で入力してください")
	    @Pattern(
	        regexp = "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,255}$",
	        message = "パスワードは英字と数字を両方含めてください"
	    )
	    private String password; // ハッシュ化されたパスワード

	    @NotNull(message = "役割は必須です")
	    private Integer roleId; // 役割ID

	    @NotNull(message = "部署は必須です")
	    private Integer departmentId; // 部署ID

	    @NotNull(message = "有効フラグは必須です")
	    private Boolean isActive; // ユーザー有効フラグ

	    private LocalDateTime createdAt; // レコード作成日時
	    private LocalDateTime updatedAt; // レコード更新日時
}
